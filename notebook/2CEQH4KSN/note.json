{
  "paragraphs": [
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train_raw.headers\")\n\n\nval test \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/test_raw.headers\")\n\nval positive_train \u003d train.filter($\"rating\" \u003e\u003d4)\n\nval positive_test \u003d test.filter($\"rating\"\u003e\u003d4)\n\npositive_train.rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train_temp\")\n\npositive_test.rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/test_temp\")\n\n\n",
      "dateUpdated": "Apr 12, 2017 10:02:20 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306180_-1546551206",
      "id": "20170412-220146_1453468494",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "train: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ntest: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\npositive_train: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\npositive_test: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train_raw.headers\")",
      "dateUpdated": "Apr 12, 2017 10:02:30 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027334814_368606225",
      "id": "20170412-220214_1314592171",
      "dateCreated": "Apr 12, 2017 10:02:14 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train.temp.headers\")\n\n\nval test \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/test.temp.headers\")\n\nval test_all \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/test_raw.headers\")\n\n",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306181_-1546935955",
      "id": "20170412-220146_818494033",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "train: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ntest: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ntest_all: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train.temp.headers\")\n\nval validMovieId \u003d train.select(\"movieId\").distinct\n\nval test \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/test.temp.headers\")\n\nval goodTest \u003d test.join(validMovieId,test(\"movieId\")\u003d\u003d\u003dvalidMovieId(\"movieId\")).drop(validMovieId(\"movieId\"))\n\n\n\nval test_all \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/test_raw.headers\")\n    \nval goodTest_All \u003d test_all.join(validMovieId,test_all(\"movieId\")\u003d\u003d\u003dvalidMovieId(\"movieId\")).drop(validMovieId(\"movieId\"))\n\ngoodTest.orderBy(\"timestamp\").select(\"timestamp\",\"userId\",\"movieId\").rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/goodtest\")\n\ngoodTest_All.orderBy(\"timestamp\").select(\"timestamp\",\"userId\",\"movieId\").rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/goodtestall\")\n\n",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 4.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306181_-1546935955",
      "id": "20170412-220146_1796453596",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "train: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\nvalidMovieId: org.apache.spark.sql.DataFrame \u003d [movieId: int]\ntest: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ngoodTest: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ntest_all: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ngoodTest_All: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train.temp.headers\")\n        \nval validMovieId \u003d train.select(\"movieId\").distinct\n\n\nval train_all \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train_raw.headers\")\n\nval good_train_all \u003d train.join(validMovieId,train(\"movieId\")\u003d\u003d\u003dvalidMovieId(\"movieId\")).drop(validMovieId(\"movieId\"))\n\ngood_train_all.orderBy(\"timestamp\").rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/goodtrainall\")",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306182_-1545781708",
      "id": "20170412-220146_1522994799",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "train: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\nvalidMovieId: org.apache.spark.sql.DataFrame \u003d [movieId: int]\ntrain_all: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\ngood_train_all: org.apache.spark.sql.DataFrame \u003d [userId: int, rating: int, timestamp: int, movieId: int]\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306182_-1545781708",
      "id": "20170412-220146_1115998200",
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/train.temp.headers\")\n train.orderBy(\"timestamp\").select(\"timestamp\",\"userId\",\"movieId\").rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/goodtrain\")\n",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306182_-1545781708",
      "id": "20170412-220146_459574502",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "train: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val train \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/cofactor/pro/train.csv\")\nval unique_uid \u003d train.select(\"uId\").distinct\nval unique_sid \u003d train.select(\"sid\").distinct\nunique_uid.rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/cofactor/pro/unique_uid.txt\")\nunique_sid.rdd.coalesce(1,false).saveAsTextFile(\"/data/sidana/nnmf_ranking/archive_version/outbrain/cofactor/pro/unique_sid.txt\")\n",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306182_-1545781708",
      "id": "20170412-220146_1717460502",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "train: org.apache.spark.sql.DataFrame \u003d [timestamp: int, uid: int, sid: int]\nunique_uid: org.apache.spark.sql.DataFrame \u003d [uId: int]\nunique_sid: org.apache.spark.sql.DataFrame \u003d [sid: int]\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "test.select(\"movieId\").distinct.except(train.select(\"movieId\").distinct).count",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306183_-1546166457",
      "id": "20170412-220146_1030957787",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res7: Long \u003d 96\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val original \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/nnmf_ranking/archive_version/outbrain/input_data/ratings.headers.csv\")\n//val groubByUsers \u003d original.groupBy(\"userid\").count.sort(asc(\"count\"))\n//z.show(groubByUsers)\n\nval num_users \u003d original.select(\"userId\").distinct.count\nval num_items \u003d original.select(\"movieId\").distinct.count\n\n\n\noriginal.agg(max(\"movieId\")).show\noriginal.agg(max(\"userId\")).show\n\noriginal.agg(min(\"movieId\")).show\noriginal.agg(min(\"userId\")).show\n\nval interactions \u003d original.count",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "editorMode": "ace/mode/scala",
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306183_-1546166457",
      "id": "20170412-220146_1409462113",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "original: org.apache.spark.sql.DataFrame \u003d [userId: int, movieId: int, rating: int, timestamp: int]\nnum_users: Long \u003d 49615\nnum_items: Long \u003d 105176\n+------------+\n|max(movieId)|\n+------------+\n|      105176|\n+------------+\n\n+-----------+\n|max(userId)|\n+-----------+\n|      49615|\n+-----------+\n\n+------------+\n|min(movieId)|\n+------------+\n|           1|\n+------------+\n\n+-----------+\n|min(userId)|\n+-----------+\n|          1|\n+-----------+\n\ninteractions: Long \u003d 1597426\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val positiveInteractions \u003d original.filter($\"rating\"\u003e\u003d4)\nval groubByUsers \u003d positiveInteractions.groupBy(\"userid\").count.sort(asc(\"count\"))\nz.show(groubByUsers)",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306183_-1546166457",
      "id": "20170412-220146_2085106781",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "userid\tcount\n13662\t5\n24836\t5\n30062\t5\n3436\t5\n24636\t5\n7462\t5\n13462\t5\n19232\t5\n28636\t5\n44036\t5\n1036\t5\n2062\t5\n40262\t5\n9862\t5\n45062\t5\n12632\t5\n46232\t5\n32636\t5\n3236\t5\n8036\t5\n12036\t5\n45636\t5\n24436\t5\n34262\t5\n31262\t5\n39662\t5\n7262\t5\n40862\t5\n41062\t5\n10662\t5\n13062\t5\n39832\t5\n12232\t5\n44232\t5\n18632\t5\n47632\t5\n32436\t5\n35836\t5\n37436\t5\n5236\t5\n7836\t5\n43036\t5\n30836\t5\n44436\t5\n16836\t5\n20036\t5\n24236\t5\n26636\t5\n34062\t5\n36262\t5\n1462\t5\n39062\t5\n5662\t5\n6262\t5\n27662\t5\n8262\t5\n9262\t5\n9662\t5\n29832\t5\n10062\t5\n10462\t5\n44062\t5\n12662\t5\n3232\t5\n5232\t5\n8832\t5\n42432\t5\n15440\t5\n13632\t5\n15432\t5\n18432\t5\n20832\t5\n23432\t5\n24832\t5\n27436\t5\n27636\t5\n35036\t5\n36036\t5\n3036\t5\n4436\t5\n5036\t5\n6036\t5\n42036\t5\n30436\t5\n11236\t5\n11636\t5\n11836\t5\n44236\t5\n14636\t5\n45436\t5\n31036\t5\n17236\t5\n47236\t5\n21636\t5\n636\t5\n2432\t5\n25436\t5\n49062\t5\n32062\t5\n35262\t5\n36062\t5\n22262\t5\n862\t5\n25062\t5\n3862\t5\n39262\t5\n5262\t5\n8840\t5\n33032\t5\n40062\t5\n7062\t5\n37232\t5\n40462\t5\n40662\t5\n9062\t5\n9462\t5\n28862\t5\n35832\t5\n48232\t5\n40840\t5\n2032\t5\n41840\t5\n41262\t5\n10862\t5\n11462\t5\n12262\t5\n44862\t5\n43040\t5\n39032\t5\n39232\t5\n5032\t5\n28232\t5\n7632\t5\n28632\t5\n12032\t5\n42640\t5\n29640\t5\n13232\t5\n28832\t5\n27439\t5\n14832\t5\n16832\t5\n45832\t5\n19632\t5\n46632\t5\n47232\t5\n25232\t5\n43840\t5\n23832\t5\n30040\t5\n32036\t5\n2440\t5\n33836\t5\n34836\t5\n28036\t5\n30639\t5\n14239\t5\n30839\t5\n2836\t5\n8439\t5\n4036\t5\n38436\t5\n38836\t5\n31639\t5\n29636\t5\n6436\t5\n7636\t5\n8639\t5\n9636\t5\n42436\t5\n11036\t5\n33439\t5\n11436\t5\n19240\t5\n43236\t5\n8839\t5\n12636\t5\n13636\t5\n21040\t5\n35039\t5\n15436\t5\n37040\t5\n15836\t5\n9039\t5\n37240\t5\n45836\t5\n19636\t5\n20436\t5\n48836\t5\n22236\t5\n24036\t5\n10440\t5\n27232\t5\n1236\t5\n2436\t5\n37662\t5\n37462\t5\n38062\t5\n31462\t5\n26262\t5\n34462\t5\n39439\t5\n35862\t5\n36662\t5\n21862\t5\n22662\t5\n24862\t5\n32832\t5\n2862\t5\n3062\t5\n3262\t5\n27462\t5\n4262\t5\n6840\t5\n39462\t5\n25840\t5\n9839\t5\n42639\t5\n39240\t5\n8240\t5\n6862\t5\n43639\t5\n39440\t5\n12640\t5\n35432\t5\n45039\t5\n7662\t5\n35032\t5\n8662\t5\n45639\t5\n34832\t5\n33640\t5\n49232\t5\n46039\t5\n39840\t5\n31240\t5\n22240\t5\n47039\t5\n47832\t5\n21640\t5\n34440\t5\n48239\t5\n232\t5\n34240\t5\n9640\t5\n48639\t5\n27832\t5\n1032\t5\n41462\t5\n11262\t5\n29662\t5\n11662\t5\n44262\t5\n37832\t5\n12462\t5\n439\t5\n13840\t5\n38832\t5\n3032\t5\n26640\t5\n3832\t5\n4640\t5\n39432\t5\n1049\t5\n5432\t5\n40432\t5\n40632\t5\n9832\t5\n10232\t5\n11432\t5\n11832\t5\n440\t5\n35840\t5\n42240\t5\n15040\t5\n40\t5\n42832\t5\n49440\t5\n25040\t5\n9049\t5\n2649\t5\n12439\t5\n44832\t5\n45232\t5\n45432\t5\n17032\t5\n18232\t5\n28639\t5\n17240\t5\n46432\t5\n20432\t5\n21032\t5\n21832\t5\n22032\t5\n22632\t5\n849\t5\n1440\t5\n15840\t5\n17040\t5\n1040\t5\n44240\t5\n25836\t5\n45840\t5\n29639\t5\n1840\t5\n36440\t5\n33036\t5\n28640\t5\n34636\t5\n8849\t5\n21849\t5\n22249\t5\n22449\t5\n23049\t5\n5249\t5\n5449\t5\n49\t5\n36236\t5\n37036\t5\n5649\t5\n31239\t5\n14439\t5\n37836\t5\n5849\t5\n1639\t5\n4239\t5\n4836\t5\n6049\t5\n1449\t5\n14639\t5\n5436\t5\n6249\t5\n39836\t5\n6836\t5\n7436\t5\n6649\t5\n32239\t5\n14839\t5\n42236\t5\n7249\t5\n9836\t5\n10036\t5\n42636\t5\n7449\t5\n1849\t5\n15039\t5\n46640\t5\n7649\t5\n17840\t5\n18840\t5\n46440\t5\n7849\t5\n34439\t5\n15239\t5\n12436\t5\n8049\t5\n21240\t5\n4439\t5\n46840\t5\n8249\t5\n2049\t5\n15439\t5\n14836\t5\n8449\t5\n48440\t5\n3440\t5\n32440\t5\n8649\t5\n36839\t5\n16239\t5\n32640\t5\n37039\t5\n18036\t5\n18836\t5\n19036\t5\n31236\t5\n47436\t5\n25432\t5\n21436\t5\n37439\t5\n49036\t5\n36\t5\n28436\t5\n9239\t5\n9040\t5\n49040\t5\n5240\t5\n24049\t5\n36436\t5\n1836\t5\n36836\t5\n30632\t5\n25462\t5\n22440\t5\n25662\t5\n38839\t5\n462\t5\n27432\t5\n27262\t5\n29040\t5\n4840\t5\n32040\t5\n17439\t5\n27449\t5\n11849\t5\n31232\t5\n26462\t5\n39839\t5\n26662\t5\n17839\t5\n48862\t5\n29249\t5\n31432\t5\n23062\t5\n24462\t5\n40639\t5\n31832\t5\n9639\t5\n38662\t5\n31049\t5\n33040\t5\n38862\t5\n27032\t5\n41839\t5\n4062\t5\n18239\t5\n5440\t5\n32449\t5\n5840\t5\n4462\t5\n4862\t5\n42439\t5\n30640\t5\n33249\t5\n18639\t5\n34649\t5\n14449\t5\n35249\t5\n8040\t5\n35649\t5\n43039\t5\n35849\t5\n19839\t5\n36049\t5\n15049\t5\n36249\t5\n8440\t5\n36449\t5\n44439\t5\n36649\t5\n10239\t5\n36849\t5\n16449\t5\n37249\t5\n9440\t5\n37449\t5\n45239\t5\n37849\t5\n20239\t5\n38049\t5\n17249\t5\n38249\t5\n34632\t5\n38649\t5\n45839\t5\n39249\t5\n10439\t5\n39449\t5\n18249\t5\n39649\t5\n27840\t5\n39849\t5\n46639\t5\n40249\t5\n21239\t5\n40449\t5\n18649\t5\n40849\t5\n36832\t5\n41049\t5\n47639\t5\n41649\t5\n10639\t5\n41849\t5\n19449\t5\n42249\t5\n25440\t5\n42649\t5\n48439\t5\n43649\t5\n21839\t5\n44649\t5\n20049\t5\n44849\t5\n32\t5\n639\t5\n432\t5\n37432\t5\n38232\t5\n11062\t5\n41662\t5\n10840\t5\n832\t5\n23239\t5\n1232\t5\n2639\t5\n12062\t5\n6039\t5\n11440\t5\n31840\t5\n29440\t5\n2041\t5\n23439\t5\n6239\t5\n42040\t5\n11639\t5\n17640\t5\n2832\t5\n28032\t5\n23639\t5\n26840\t5\n1239\t5\n12840\t5\n3039\t5\n30440\t5\n4232\t5\n4632\t5\n10641\t5\n4041\t5\n24239\t5\n13040\t5\n11839\t5\n5632\t5\n5832\t5\n7432\t5\n25639\t5\n41232\t5\n10032\t5\n41832\t5\n10832\t5\n42032\t5\n11632\t5\n42232\t5\n1041\t5\n27039\t5\n7039\t5\n23040\t5\n12039\t5\n22640\t5\n14040\t5\n48840\t5\n27239\t5\n23640\t5\n23440\t5\n15240\t5\n24640\t5\n34840\t5\n10441\t5\n24841\t5\n25041\t5\n25241\t5\n25641\t5\n6241\t5\n6441\t5\n41\t5\n14032\t5\n14632\t5\n6641\t5\n28239\t5\n16032\t5\n16432\t5\n6841\t5\n29032\t5\n45632\t5\n18032\t5\n7241\t5\n2241\t5\n8039\t5\n46040\t5\n7841\t5\n13039\t5\n19832\t5\n29632\t5\n8041\t5\n28839\t5\n46832\t5\n21632\t5\n8441\t5\n4039\t5\n22232\t5\n47432\t5\n8641\t5\n2441\t5\n29039\t5\n36240\t5\n8841\t5\n13439\t5\n15640\t5\n2640\t5\n9041\t5\n29239\t5\n16240\t5\n16040\t5\n9241\t5\n16840\t5\n16440\t5\n16640\t5\n9441\t5\n3841\t5\n8239\t5\n32240\t5\n9841\t5\n14039\t5\n1640\t5\n36640\t5\n10041\t5\n30039\t5\n34036\t5\n34236\t5\n24641\t5\n46841\t5\n47041\t5\n47841\t5\n48041\t5\n48241\t5\n48441\t5\n48641\t5\n48841\t5\n49241\t5\n25841\t5\n10841\t5\n26241\t5\n11041\t5\n27441\t5\n641\t5\n27641\t5\n12441\t5\n27841\t5\n31436\t5\n29841\t5\n13241\t5\n30041\t5\n4241\t5\n30641\t5\n13441\t5\n31241\t5\n30240\t5\n31441\t5\n13641\t5\n31641\t5\n31439\t5\n32241\t5\n14041\t5\n32441\t5\n4636\t5\n33041\t5\n14241\t5\n33241\t5\n4841\t5\n33441\t5\n14441\t5\n33641\t5\n39236\t5\n33841\t5\n14641\t5\n34041\t5\n32039\t5\n34241\t5\n14841\t5\n34441\t5\n41236\t5\n34641\t5\n15441\t5\n35041\t5\n5041\t5\n35441\t5\n15841\t5\n35641\t5\n20040\t5\n36241\t5\n16241\t5\n36441\t5\n33039\t5\n37041\t5\n17041\t5\n37441\t5\n10836\t5\n37641\t5\n17441\t5\n37841\t5\n5441\t5\n38041\t5\n17641\t5\n38841\t5\n46240\t5\n39041\t5\n17841\t5\n39441\t5\n33639\t5\n39641\t5\n18441\t5\n39841\t5\n18240\t5\n40441\t5\n19241\t5\n40641\t5\n5641\t5\n40841\t5\n19441\t5\n41041\t5\n4440\t5\n41241\t5\n20241\t5\n41641\t5\n34839\t5\n41841\t5\n20441\t5\n42241\t5\n20240\t5\n42841\t5\n21041\t5\n43441\t5\n5841\t5\n43841\t5\n21241\t5\n44041\t5\n3640\t5\n44441\t5\n21641\t5\n44641\t5\n35839\t5\n45241\t5\n21841\t5\n45441\t5\n48640\t5\n45641\t5\n22041\t5\n45841\t5\n6041\t5\n46041\t5\n22641\t5\n46241\t5\n34640\t5\n46441\t5\n21249\t5\n45249\t5\n28240\t5\n46249\t5\n18436\t5\n47049\t5\n46236\t5\n47449\t5\n37239\t5\n48049\t5\n20236\t5\n48249\t5\n16639\t5\n48849\t5\n4040\t5\n25060\t5\n49049\t5\n49249\t5\n21836\t5\n23249\t5\n23036\t5\n9249\t5\n23836\t5\n23649\t5\n37839\t5\n9449\t5\n27440\t5\n23849\t5\n16839\t5\n649\t5\n37840\t5\n35460\t5\n25660\t5\n9849\t5\n38039\t5\n24649\t5\n2239\t5\n5039\t5\n31836\t5\n25449\t5\n38639\t5\n10249\t5\n2636\t5\n25649\t5\n17239\t5\n2849\t5\n25862\t5\n25860\t5\n25849\t5\n10849\t5\n49462\t5\n26049\t5\n25632\t5\n26832\t5\n30432\t5\n26449\t5\n39039\t5\n11649\t5\n32840\t5\n26849\t5\n9439\t5\n35260\t5\n48860\t5\n49260\t5\n49460\t5\n30060\t5\n26060\t5\n31060\t5\n28449\t5\n35462\t5\n35662\t5\n31260\t5\n28849\t5\n12049\t5\n36462\t5\n31460\t5\n29049\t5\n3049\t5\n37262\t5\n31860\t5\n26460\t5\n12649\t5\n40439\t5\n32260\t5\n30049\t5\n23662\t5\n23862\t5\n32660\t5\n30249\t5\n12849\t5\n7240\t5\n32860\t5\n30849\t5\n18039\t5\n34232\t5\n33260\t5\n26660\t5\n13249\t5\n41639\t5\n33660\t5\n31649\t5\n5239\t5\n31632\t5\n34060\t5\n32049\t5\n13649\t5\n38640\t5\n34260\t5\n32249\t5\n3249\t5\n38040\t5\n34460\t5\n27260\t5\n13849\t5\n42239\t5\n34660\t5\n32649\t5\n6040\t5\n38440\t5\n34860\t5\n32849\t5\n14049\t5\n35040\t5\n48260\t5\n21660\t5\n21860\t5\n22460\t5\n23060\t5\n23260\t5\n24060\t5\n24260\t5\n60\t5\n35660\t5\n460\t5\n27460\t5\n660\t5\n35860\t5\n1260\t5\n14849\t5\n1660\t5\n36460\t5\n2660\t5\n3449\t5\n2860\t5\n36660\t5\n3060\t5\n27660\t5\n3260\t5\n37060\t5\n3860\t5\n29240\t5\n4060\t5\n37460\t5\n4260\t5\n15249\t5\n4460\t5\n38060\t5\n4660\t5\n20039\t5\n5460\t5\n39060\t5\n5660\t5\n27860\t5\n6460\t5\n39460\t5\n6660\t5\n5439\t5\n7060\t5\n39660\t5\n7260\t5\n16649\t5\n8460\t5\n39860\t5\n8660\t5\n3849\t5\n9260\t5\n40260\t5\n9660\t5\n28060\t5\n9860\t5\n40460\t5\n10260\t5\n33440\t5\n10660\t5\n40860\t5\n11060\t5\n17849\t5\n11460\t5\n41260\t5\n11660\t5\n21039\t5\n11860\t5\n41860\t5\n12260\t5\n28260\t5\n12460\t5\n42060\t5\n12660\t5\n34040\t5\n13060\t5\n42260\t5\n13260\t5\n18449\t5\n13460\t5\n43260\t5\n13860\t5\n4049\t5\n14060\t5\n43460\t5\n14260\t5\n28660\t5\n14460\t5\n43660\t5\n15260\t5\n36432\t5\n15460\t5\n43860\t5\n15660\t5\n19049\t5\n16060\t5\n44460\t5\n16860\t5\n21439\t5\n17060\t5\n44660\t5\n17460\t5\n29060\t5\n17860\t5\n46260\t5\n18260\t5\n39\t5\n18460\t5\n46460\t5\n19260\t5\n19849\t5\n19460\t5\n46660\t5\n19860\t5\n5049\t5\n20060\t5\n47260\t5\n20260\t5\n29860\t5\n21060\t5\n47860\t5\n21260\t5\n26040\t5\n21460\t5\n45049\t5\n49439\t5\n21440\t5\n11239\t5\n47240\t5\n41440\t5\n12040\t5\n22439\t5\n\n\u003cfont color\u003dred\u003eResults are limited by 1000.\u003c/font\u003e"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val negativeInteractions \u003d original.filter($\"rating\"\u003c4)\nval groubByUsers \u003d negativeInteractions.groupBy(\"userid\").count.sort(asc(\"count\"))\nz.show(groubByUsers)",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306184_-1548090202",
      "id": "20170412-220146_1751516521",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "userid\tcount\n40215\t5\n27376\t5\n8806\t5\n33552\t5\n25499\t5\n33807\t5\n3153\t5\n12817\t5\n10020\t5\n10422\t5\n18825\t5\n11372\t5\n44474\t5\n22109\t5\n13460\t5\n32717\t5\n31537\t5\n27844\t5\n717\t5\n18521\t5\n25455\t5\n286\t5\n33993\t5\n19774\t5\n47055\t5\n30371\t5\n26703\t5\n20540\t5\n18917\t5\n9065\t5\n20141\t5\n14267\t5\n18970\t5\n376\t5\n4646\t5\n16748\t5\n45238\t5\n23119\t5\n14141\t5\n7982\t5\n27575\t5\n4067\t5\n29941\t5\n975\t5\n9716\t5\n35975\t5\n45779\t5\n42778\t5\n1578\t5\n36631\t5\n13778\t5\n13694\t5\n49579\t5\n18579\t5\n23876\t5\n36537\t5\n45916\t5\n34927\t5\n48537\t5\n184\t5\n28985\t5\n694\t5\n7182\t5\n5521\t5\n22943\t5\n28321\t5\n21187\t5\n6068\t5\n290\t5\n3668\t5\n33944\t5\n46890\t5\n47785\t5\n36589\t5\n12789\t5\n29924\t5\n15468\t5\n5585\t5\n38188\t5\n2544\t5\n41438\t5\n2663\t5\n8150\t5\n19790\t5\n36927\t5\n42745\t5\n16503\t5\n22594\t5\n2482\t5\n44063\t5\n18433\t5\n37756\t5\n30993\t5\n12796\t5\n49195\t5\n600\t5\n38527\t5\n12952\t5\n44599\t5\n2399\t5\n18103\t5\n28682\t5\n12882\t5\n18518\t5\n7398\t5\n42489\t5\n43398\t5\n32899\t5\n13441\t5\n9798\t5\n37200\t5\n15002\t5\n22089\t5\n2401\t5\n4203\t5\n37641\t5\n34489\t5\n34118\t5\n6202\t5\n40693\t5\n24641\t5\n13205\t5\n12958\t5\n14852\t5\n28048\t5\n9151\t5\n38293\t5\n30005\t5\n26958\t5\n44406\t5\n34210\t5\n19088\t5\n44010\t5\n28210\t5\n17126\t5\n2660\t5\n16208\t5\n46549\t5\n16797\t5\n34860\t5\n3797\t5\n20557\t5\n4049\t5\n4407\t5\n18888\t5\n20251\t5\n48607\t5\n31500\t5\n27478\t5\n7066\t5\n40411\t5\n10246\t5\n38870\t5\n4357\t5\n2611\t5\n7813\t5\n3834\t5\n4929\t5\n26217\t5\n5017\t5\n32247\t5\n6619\t5\n48933\t5\n15417\t5\n42733\t5\n25822\t5\n28047\t5\n20815\t5\n30015\t5\n24616\t5\n26816\t5\n28239\t5\n5896\t5\n45747\t5\n38320\t5\n22563\t5\n46620\t5\n30520\t5\n45120\t5\n45012\t5\n20132\t5\n7623\t5\n31821\t5\n22027\t5\n32821\t5\n3821\t5\n38564\t5\n2963\t5\n17423\t5\n19823\t5\n44843\t5\n33502\t5\n35643\t5\n49554\t5\n9848\t5\n26027\t5\n25905\t5\n24755\t5\n19332\t5\n19028\t5\n45680\t5\n11305\t5\n6428\t5\n48354\t5\n22934\t5\n17859\t5\n10880\t5\n44430\t5\n39730\t5\n18365\t5\n5259\t5\n5731\t5\n7901\t5\n45064\t5\n8355\t5\n13461\t5\n2034\t5\n15861\t5\n261\t5\n38257\t5\n34301\t5\n5131\t5\n36755\t5\n4281\t5\n10861\t5\n20707\t5\n33061\t5\n29673\t5\n4635\t5\n1881\t5\n10917\t5\n40768\t5\n968\t5\n39473\t5\n40711\t5\n48073\t5\n37911\t5\n19968\t5\n38073\t5\n34848\t5\n34360\t5\n42714\t5\n15872\t5\n19873\t5\n16160\t5\n18914\t5\n698\t5\n41717\t5\n8515\t5\n35309\t5\n42362\t5\n32915\t5\n30855\t5\n37098\t5\n8085\t5\n28162\t5\n34057\t5\n10856\t5\n43772\t5\n13852\t5\n41230\t5\n48394\t6\n41876\t6\n29966\t6\n25370\t6\n38577\t6\n3475\t6\n5737\t6\n41231\t6\n16743\t6\n2786\t6\n42386\t6\n39985\t6\n41543\t6\n15868\t6\n3477\t6\n41890\t6\n9551\t6\n21419\t6\n47996\t6\n44195\t6\n11399\t6\n49156\t6\n26806\t6\n41405\t6\n33610\t6\n9326\t6\n24878\t6\n4016\t6\n15052\t6\n22567\t6\n16946\t6\n4539\t6\n2740\t6\n30087\t6\n9973\t6\n14275\t6\n24116\t6\n11779\t6\n33076\t6\n35631\t6\n44122\t6\n28937\t6\n15721\t6\n29276\t6\n10238\t6\n25476\t6\n22090\t6\n44194\t6\n34924\t6\n30585\t6\n37791\t6\n29744\t6\n25788\t6\n4103\t6\n23591\t6\n31792\t6\n21550\t6\n42689\t6\n48745\t6\n46195\t6\n32352\t6\n21398\t6\n15752\t6\n13841\t6\n10801\t6\n6002\t6\n11446\t6\n46403\t6\n17203\t6\n23803\t6\n29493\t6\n24406\t6\n2647\t6\n41456\t6\n48351\t6\n26610\t6\n17888\t6\n7397\t6\n2728\t6\n20807\t6\n45014\t6\n10878\t6\n4953\t6\n24217\t6\n26753\t6\n10050\t6\n8017\t6\n14415\t6\n5281\t6\n24929\t6\n41216\t6\n7218\t6\n14120\t6\n24622\t6\n24012\t6\n27132\t6\n12439\t6\n46564\t6\n2627\t6\n44825\t6\n22025\t6\n11828\t6\n26954\t6\n44334\t6\n3659\t6\n26930\t6\n43242\t6\n7131\t6\n2707\t6\n38766\t6\n24168\t6\n21673\t6\n38284\t6\n4711\t6\n23536\t6\n46073\t6\n5368\t6\n136\t6\n12684\t6\n13135\t6\n18083\t6\n36739\t6\n33572\t6\n7177\t7\n44521\t7\n3095\t7\n37193\t7\n18951\t7\n39510\t7\n42505\t7\n18434\t7\n20541\t7\n1446\t7\n22719\t7\n34116\t7\n46548\t7\n20476\t7\n42276\t7\n6121\t7\n44124\t7\n1789\t7\n46127\t7\n41791\t7\n41695\t7\n15788\t7\n6944\t7\n11999\t7\n20198\t7\n48718\t7\n28118\t7\n14089\t7\n41323\t7\n35453\t7\n49209\t7\n13157\t7\n47806\t7\n13453\t7\n9824\t7\n34696\t7\n37821\t7\n2023\t7\n38932\t7\n45228\t7\n35134\t7\n24534\t7\n42430\t7\n34830\t7\n31301\t7\n39681\t7\n13442\t7\n16159\t7\n10657\t7\n2915\t7\n24329\t7\n14374\t7\n12113\t7\n43086\t7\n12571\t7\n42855\t7\n15971\t7\n43773\t7\n17773\t7\n19275\t7\n37778\t7\n33937\t7\n18438\t7\n8789\t7\n31090\t7\n15895\t7\n27695\t7\n16656\t7\n41303\t7\n9089\t7\n26053\t7\n29526\t7\n21270\t7\n8288\t7\n29606\t7\n14609\t7\n19611\t7\n2011\t7\n24757\t7\n36013\t7\n45639\t7\n4636\t7\n49297\t7\n28027\t7\n31228\t7\n3259\t7\n33904\t7\n32680\t7\n13061\t7\n21260\t7\n14504\t7\n38131\t7\n35155\t7\n12055\t7\n14035\t7\n8242\t7\n22035\t7\n16673\t7\n6538\t7\n42684\t7\n6698\t7\n13315\t7\n40115\t7\n20529\t8\n10410\t8\n47377\t8\n25737\t8\n37382\t8\n21122\t8\n39324\t8\n17868\t8\n38668\t8\n29991\t8\n1103\t8\n14798\t8\n9406\t8\n36292\t8\n28318\t8\n31351\t8\n36961\t8\n41628\t8\n26880\t8\n45969\t8\n38369\t8\n6971\t8\n20573\t8\n11941\t8\n23094\t8\n748\t8\n22664\t8\n13183\t8\n22665\t8\n15586\t8\n42187\t8\n27077\t8\n38677\t8\n6544\t8\n41440\t8\n7895\t8\n34550\t8\n11790\t8\n17038\t8\n25127\t8\n35552\t8\n10598\t8\n39356\t8\n4441\t8\n11206\t8\n11891\t8\n46033\t8\n46810\t8\n12749\t8\n21633\t8\n34149\t8\n46288\t8\n19928\t8\n7500\t8\n15300\t8\n3011\t8\n29211\t8\n30553\t8\n15329\t8\n1120\t8\n39820\t8\n33439\t8\n16563\t8\n44823\t8\n34532\t8\n42932\t8\n16168\t8\n14273\t8\n1538\t8\n43368\t8\n40759\t8\n20442\t8\n31140\t8\n46540\t8\n42121\t8\n41187\t8\n40950\t8\n31394\t8\n6592\t8\n9899\t8\n24998\t8\n5299\t8\n9202\t8\n15458\t8\n32241\t8\n26091\t8\n18451\t8\n2106\t8\n10563\t8\n14016\t8\n33120\t8\n2679\t8\n6347\t8\n48364\t8\n25850\t8\n38223\t8\n45429\t8\n28029\t8\n22628\t8\n9532\t8\n49228\t8\n35908\t8\n18059\t8\n41042\t8\n29168\t8\n9712\t8\n44531\t8\n22960\t8\n33684\t8\n29073\t8\n15136\t8\n37314\t8\n18939\t8\n32872\t8\n13098\t8\n4483\t8\n16109\t8\n37709\t8\n47382\t9\n8171\t9\n38599\t9\n28632\t9\n44137\t9\n45395\t9\n22819\t9\n26627\t9\n7264\t9\n36775\t9\n6945\t9\n47388\t9\n33196\t9\n6801\t9\n6807\t9\n17019\t9\n24018\t9\n44021\t9\n49467\t9\n19777\t9\n38038\t9\n9183\t9\n8238\t9\n23477\t9\n2185\t9\n12863\t9\n25669\t9\n40200\t9\n31001\t9\n40923\t9\n33288\t9\n40807\t9\n11811\t9\n42814\t9\n28215\t9\n42618\t9\n38249\t9\n1823\t9\n8628\t9\n43366\t9\n20374\t9\n26771\t9\n21340\t9\n13977\t9\n1176\t9\n49348\t9\n3383\t9\n8737\t9\n17382\t9\n34868\t9\n31387\t9\n1495\t9\n37944\t9\n42463\t9\n29390\t9\n32399\t9\n21689\t9\n18800\t9\n518\t9\n22802\t9\n31840\t9\n21918\t9\n36751\t9\n20397\t9\n7208\t9\n9753\t9\n32211\t9\n38925\t9\n31817\t9\n13432\t9\n21018\t9\n27218\t9\n26422\t9\n27221\t9\n31879\t9\n23897\t9\n21902\t9\n37826\t9\n44628\t9\n12345\t9\n37774\t9\n36845\t9\n18255\t9\n14171\t9\n47113\t9\n22740\t9\n36686\t9\n41319\t9\n9141\t9\n1548\t9\n30050\t9\n1452\t9\n21986\t9\n2384\t9\n33189\t9\n877\t9\n1524\t9\n43150\t9\n24103\t9\n24195\t9\n199\t9\n10440\t9\n11869\t9\n32752\t9\n48089\t9\n37202\t9\n893\t9\n35654\t9\n41610\t9\n48033\t9\n13949\t9\n17997\t9\n31208\t9\n35291\t9\n17291\t9\n49211\t9\n45957\t9\n37125\t9\n31617\t9\n4733\t9\n8333\t9\n27497\t9\n26015\t9\n4037\t9\n11018\t9\n15634\t9\n35147\t9\n34220\t9\n5820\t9\n24639\t9\n37839\t9\n22823\t9\n12964\t9\n43702\t9\n43105\t9\n732\t9\n31426\t9\n26897\t9\n34228\t9\n5136\t9\n44938\t9\n5539\t9\n3245\t9\n33282\t9\n3652\t9\n47110\t9\n19686\t9\n6245\t9\n6286\t9\n3867\t9\n35375\t9\n46294\t9\n7295\t9\n37077\t9\n8662\t9\n23992\t9\n40395\t9\n42127\t9\n998\t9\n30244\t9\n40246\t9\n17889\t9\n8151\t9\n3928\t9\n7008\t9\n22491\t9\n31525\t9\n29617\t9\n44106\t9\n29247\t9\n33817\t9\n2417\t9\n47161\t9\n45767\t9\n19615\t9\n14310\t9\n40416\t9\n7096\t9\n48147\t9\n5720\t9\n20037\t9\n28839\t9\n30839\t9\n34163\t9\n4097\t9\n33843\t9\n34225\t9\n28825\t9\n18458\t9\n21629\t9\n36828\t9\n45565\t9\n17305\t9\n26701\t9\n20061\t9\n3080\t9\n16866\t9\n42755\t9\n30074\t9\n14111\t9\n13081\t9\n21967\t9\n22114\t9\n24714\t9\n46142\t9\n21715\t9\n29515\t9\n26962\t9\n31109\t9\n11085\t9\n2650\t9\n36309\t9\n14674\t9\n44050\t9\n2075\t9\n24644\t9\n15638\t9\n41903\t9\n19506\t9\n25331\t9\n19966\t9\n45129\t9\n38037\t9\n9639\t9\n13963\t9\n19504\t9\n22165\t9\n46965\t9\n43859\t9\n24080\t9\n13661\t9\n29261\t9\n42481\t9\n19759\t9\n28714\t9\n48912\t9\n7142\t9\n32881\t9\n18081\t9\n27160\t9\n33759\t9\n48359\t9\n2572\t9\n18515\t9\n47939\t9\n5962\t9\n29883\t9\n16315\t9\n20935\t9\n19898\t9\n44646\t9\n21485\t9\n4250\t9\n42085\t9\n2730\t10\n42480\t10\n48459\t10\n15367\t10\n14260\t10\n29967\t10\n25762\t10\n17565\t10\n7167\t10\n11131\t10\n24359\t10\n7762\t10\n14309\t10\n1705\t10\n43155\t10\n11355\t10\n245\t10\n19568\t10\n37368\t10\n46834\t10\n15146\t10\n14562\t10\n10885\t10\n43717\t10\n44534\t10\n1165\t10\n31755\t10\n42955\t10\n44661\t10\n8931\t10\n36066\t10\n34931\t10\n25681\t10\n15768\t10\n884\t10\n34914\t10\n3314\t10\n27359\t10\n12338\t10\n17698\t10\n47498\t10\n6339\t10\n39683\t10\n43709\t10\n19309\t10\n42139\t10\n3530\t10\n25904\t10\n41504\t10\n29555\t10\n47131\t10\n46304\t10\n42242\t10\n18907\t10\n24701\t10\n14755\t10\n25054\t10\n45346\t10\n37281\t10\n38307\t10\n1442\t10\n32511\t10\n39542\t10\n5852\t10\n36857\t10\n35673\t10\n2511\t10\n9960\t10\n484\t10\n16959\t10\n47935\t10\n2084\t10\n43072\t10\n23935\t10\n10683\t10\n33962\t10\n21935\t10\n38362\t10\n49445\t10\n29309\t10\n17372\t10\n16683\t10\n27274\t10\n2085\t10\n5059\t10\n32304\t10\n15859\t10\n43365\t10\n28707\t10\n39259\t10\n4261\t10\n1531\t10\n25660\t10\n4107\t10\n4331\t10\n32281\t10\n18836\t10\n33660\t10\n33507\t10\n7435\t10\n38434\t10\n34884\t10\n5035\t10\n21312\t10\n38242\t10\n17167\t10\n49511\t10\n9314\t10\n9560\t10\n14242\t10\n38159\t10\n42114\t10\n49314\t10\n885\t10\n3272\t10\n13515\t10\n39135\t10\n38698\t10\n14515\t10\n5898\t10\n30915\t10\n20735\t10\n27562\t10\n31048\t10\n22046\t10\n19772\t10\n39645\t10\n23855\t10\n25060\t10\n1260\t10\n47108\t10\n49435\t10\n41835\t10\n41312\t10\n4435\t10\n31542\t10\n23473\t10\n11672\t10\n43138\t10\n33472\t10\n49466\t10\n\n\u003cfont color\u003dred\u003eResults are limited by 1000.\u003c/font\u003e"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val data \u003d sqlContext.read\n    .format(\"com.databricks.spark.csv\")\n    .option(\"header\", \"true\") // Use first line of all files as header\n    .option(\"inferSchema\", \"true\") // Automatically infer data types\n    .option(\"delimiter\", \",\")\n    .load(\"/data/sidana/adaptivity/ml_1m/embad/len1/test.headers\")\n\ndata.count\nval numPositiveInteractions \u003d data.filter($\"rating\"\u003e\u003d4).count\nval numNegativeInteractions \u003d data.filter($\"rating\"\u003c4).count",
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {
        "enabled": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "colWidth": 12.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306185_-1548474951",
      "id": "20170412-220146_32335371",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "data: org.apache.spark.sql.DataFrame \u003d [userid: int, itemid: int, rating: int, timestamp: int]\nres16: Long \u003d 103294\nnumPositiveInteractions: Long \u003d 59686\nnumNegativeInteractions: Long \u003d 43608\n"
      },
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "dateUpdated": "Apr 12, 2017 10:01:46 PM",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1492027306185_-1548474951",
      "id": "20170412-220146_147217706",
      "dateCreated": "Apr 12, 2017 10:01:46 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "nnmf_ranking: analyzeml20M",
  "id": "2CEQH4KSN",
  "angularObjects": {
    "2BGHSKCA7": [],
    "2BFMBPKAB": [],
    "2BHKKP27G": [],
    "2BJHJDBK6": [],
    "2BJAQG5W4": [],
    "2BJGSXM37": [],
    "2BFXEV5XZ": [],
    "2BG77RV7M": [],
    "2BF969NNB": [],
    "2BG8QQJNC": [],
    "2BGVG5JP4": [],
    "2BJ5FCP57": [],
    "2BFEDXCTE": [],
    "2BJ8AEWCT": [],
    "2BH9AVVKH": [],
    "2BJ7KKX85": [],
    "2BHKAE8WK": [],
    "2BJ6HN5AY": []
  },
  "config": {},
  "info": {}
}