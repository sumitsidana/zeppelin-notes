{
  "paragraphs": [
    {
      "text": "//val seq \u003d Seq(\"offerid\",\"category\",\"merchant\")\n\nval candidates \u003d sqlContext.read\n.format(\"com.databricks.spark.csv\")\n.option(\"header\", \"true\") // Use first line of all files as header\n.option(\"inferSchema\", \"true\") // Automatically infer data types\n.option(\"delimiter\", \"\\t\")\n.load(\"/data/sidana/diversity/kldivergence/param_tune/all_offers_setting/regularization/purch/test.users.unique\")\n\nval parquetFileOffers \u003d sqlContext.read\n.format(\"com.databricks.spark.csv\")\n.option(\"header\", \"true\") // Use first line of all files as header\n.option(\"inferSchema\", \"true\") // Automatically infer data types\n.option(\"delimiter\", \"\\t\")\n.load(\"/data/sidana/diversity/kldivergence/param_tune/all_offers_setting/regularization/purch/items.unique\")\n\nval offerViews \u003d  parquetFileOffers.select(\"offerid\").distinct\n\n//val offerClicks \u003d sqlContext.read\n//.format(\"com.databricks.spark.csv\")\n//.option(\"header\", \"true\") // Use first line of all files as header\n//.option(\"inferSchema\", \"true\") // Automatically infer data types\n//.option(\"delimiter\", \",\")\n//.load(\"/data/sidana/recsysBaselines/experiments/debug_ffm/debug_ffm/debug/atleast_two/offerClicks_fr.train\").withColumnRenamed(\"count\",\"offerclickcount\")\n\n\n//val userClicks \u003d sqlContext.read\n//.format(\"com.databricks.spark.csv\")\n//.option(\"header\", \"true\") // Use first line of all files as header\n//.option(\"inferSchema\", \"true\") // Automatically infer data types\n//.option(\"delimiter\", \",\")\n//.load(\"/data/sidana/recsysBaselines/experiments/debug_ffm/debug_ffm/debug/atleast_two/userClicks_fr.train\").withColumnRenamed(\"count\",\"userclickcount\")\n\n//val offerViewsClicks \u003d offerViews.join(offerClicks,Seq(\"offerid\"),\"left_outer\")\n\nval userOfferCartesianProduct \u003d offerViews.join(candidates)\n\n//val userOfferCartesianProductClicks \u003d userOfferCartesianProduct.join(userClicks,Seq(\"userid\"),\"left_outer\").na.fill(0,Seq(\"userclickcount\",\"offerclickcount\"))\n\nval file_rating_temp \u003d userOfferCartesianProduct.withColumn(\"rating\",lit(\"0\"))\n\nval file_rating \u003d file_rating_temp.withColumn(\"timestamp\",lit(\"889396582\"))\n//val file_country \u003d file_rating.withColumn(\"countrycode\",lit(\"fr\"))\n//val file_utcdate \u003d file_country.withColumn(\"utc_date\",lit(\"x\"))\n\n\n//val tempfile \u003d file_utcdate.orderBy(\"utcdate\")\n\n//tempfile.count\n\nval header \u003d \"userid,offerid,rating,timestamp\"\n\nval selectfields \u003d file_rating.select(\"userid\",\"offerid\",\"rating\",\"timestamp\")\n\nval cartesian_product \u003d selectfields.rdd.map(_.mkString(\"\\t\")).mapPartitionsWithIndex((i, iter) \u003d\u003e if (i\u003d\u003d0) (List(header).toIterator ++ iter) else iter)\n\ncartesian_product.coalesce(1,false).saveAsTextFile(\"/data/sidana/diversity/kldivergence/param_tune/all_offers_setting/regularization/purch/cartesian_product\")",
      "authenticationInfo": {},
      "dateUpdated": "Jan 30, 2018 7:44:54 PM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1510702498219_972871242",
      "id": "20171115-003458_1872015069",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "candidates: org.apache.spark.sql.DataFrame \u003d [userid: int]\nparquetFileOffers: org.apache.spark.sql.DataFrame \u003d [offerid: int]\nofferViews: org.apache.spark.sql.DataFrame \u003d [offerid: int]\nuserOfferCartesianProduct: org.apache.spark.sql.DataFrame \u003d [offerid: int, userid: int]\nfile_rating_temp: org.apache.spark.sql.DataFrame \u003d [offerid: int, userid: int, rating: string]\nfile_rating: org.apache.spark.sql.DataFrame \u003d [offerid: int, userid: int, rating: string, timestamp: string]\nheader: String \u003d userid,offerid,rating,timestamp\nselectfields: org.apache.spark.sql.DataFrame \u003d [userid: int, offerid: int, rating: string, timestamp: string]\ncartesian_product: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[34] at mapPartitionsWithIndex at \u003cconsole\u003e:43\n"
      },
      "dateCreated": "Nov 15, 2017 12:34:58 AM",
      "dateStarted": "Jan 30, 2018 7:44:54 PM",
      "dateFinished": "Jan 30, 2018 7:46:17 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "//val seq \u003d Seq(\"offerid\",\"category\",\"merchant\")\n\nval candidates \u003d sqlContext.read\n.format(\"com.databricks.spark.csv\")\n.option(\"header\", \"true\") // Use first line of all files as header\n.option(\"inferSchema\", \"true\") // Automatically infer data types\n.option(\"delimiter\", \"\\t\")\n.load(\"/data/sidana/purch/diversity/baselines/hundredmostpopular/test.users\")\n\nval parquetFileOffers \u003d sqlContext.read\n.format(\"com.databricks.spark.csv\")\n.option(\"header\", \"true\") // Use first line of all files as header\n.option(\"inferSchema\", \"true\") // Automatically infer data types\n.option(\"delimiter\", \"\\t\")\n.load(\"/data/sidana/purch/diversity/baselines/hundredmostpopular/mostpopularitems.txt\")\n\nval offerViews \u003d  parquetFileOffers.select(\"offerId\").distinct\n\nval userOfferCartesianProduct \u003d offerViews.join(candidates)\n\n\nval file_rating \u003d userOfferCartesianProduct.withColumn(\"rating\",lit(\"0\"))\n\nval header \u003d \"userid\\tofferid\\trating\"\n\nval selectfields \u003d file_rating.select(\"userid\",\"offerid\",\"rating\")\n\nval cartesian_product \u003d selectfields.rdd.map(_.mkString(\"\\t\")).mapPartitionsWithIndex((i, iter) \u003d\u003e if (i\u003d\u003d0) (List(header).toIterator ++ iter) else iter)\n\ncartesian_product.saveAsTextFile(\"/data/sidana/purch/diversity/baselines/hundredmostpopular/fm/cartesian_product\")",
      "authenticationInfo": {},
      "dateUpdated": "Nov 28, 2017 2:02:43 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1510702498220_970947498",
      "id": "20171115-003458_1955594850",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "candidates: org.apache.spark.sql.DataFrame \u003d [userid: string]\nparquetFileOffers: org.apache.spark.sql.DataFrame \u003d [offerid: bigint]\nofferViews: org.apache.spark.sql.DataFrame \u003d [offerId: bigint]\nuserOfferCartesianProduct: org.apache.spark.sql.DataFrame \u003d [offerId: bigint, userid: string]\nfile_rating: org.apache.spark.sql.DataFrame \u003d [offerId: bigint, userid: string, rating: string]\nheader: String \u003d userid\tofferid\trating\nselectfields: org.apache.spark.sql.DataFrame \u003d [userid: string, offerid: bigint, rating: string]\ncartesian_product: org.apache.spark.rdd.RDD[String] \u003d MapPartitionsRDD[34] at mapPartitionsWithIndex at \u003cconsole\u003e:41\n"
      },
      "dateCreated": "Nov 15, 2017 12:34:58 AM",
      "dateStarted": "Nov 28, 2017 2:02:43 PM",
      "dateFinished": "Nov 28, 2017 2:03:13 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "parquetFileOffers.count\nofferViews.count",
      "authenticationInfo": {},
      "dateUpdated": "Nov 28, 2017 2:03:42 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1511873950142_1878787957",
      "id": "20171128-135910_1091729414",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "res3: Long \u003d 100\nres4: Long \u003d 100\n"
      },
      "dateCreated": "Nov 28, 2017 1:59:10 PM",
      "dateStarted": "Nov 28, 2017 2:03:42 PM",
      "dateFinished": "Nov 28, 2017 2:03:45 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val cartesian_product \u003d sqlContext.read\n.format(\"com.databricks.spark.csv\")\n.option(\"header\", \"true\") // Use first line of all files as header\n.option(\"inferSchema\", \"true\") // Automatically infer data types\n.option(\"delimiter\", \"\\t\")\n.load(\"/data/sidana/purch/diversity/baselines/hundredmostpopular/cartesian_product\")\n\ncartesian_product.groupBy(\"userid\").count.describe().show",
      "authenticationInfo": {},
      "dateUpdated": "Dec 5, 2017 5:38:47 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1511874222981_1545578441",
      "id": "20171128-140342_1966298319",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cartesian_product: org.apache.spark.sql.DataFrame \u003d [userid: string, offerid: bigint, rating: int]\n+-------+-----+\n|summary|count|\n+-------+-----+\n|  count| 9371|\n|   mean|100.0|\n| stddev|  0.0|\n|    min|  100|\n|    max|  100|\n+-------+-----+\n\n"
      },
      "dateCreated": "Nov 28, 2017 2:03:42 PM",
      "dateStarted": "Dec 5, 2017 5:38:47 PM",
      "dateFinished": "Dec 5, 2017 5:38:53 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "val cartesian_product \u003d sqlContext.read\n.format(\"com.databricks.spark.csv\")\n.option(\"header\", \"true\") // Use first line of all files as header\n.option(\"inferSchema\", \"true\") // Automatically infer data types\n.option(\"delimiter\", \"\\t\")\n.load(\"/data/sidana/purch/diversity/baselines/all/cartesian_product\")\n\ncartesian_product.groupBy(\"userid\").count.describe().show",
      "authenticationInfo": {},
      "dateUpdated": "Dec 5, 2017 5:36:26 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1511874367270_-273900752",
      "id": "20171128-140607_434003703",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "cartesian_product: org.apache.spark.sql.DataFrame \u003d [userid: int, offerid: int, rating: int]\n+-------+------------------+------+\n|summary|            userid| count|\n+-------+------------------+------+\n|  count|              9371|  9371|\n|   mean| 50019.92231352044|2840.0|\n| stddev|35718.185371843276|   0.0|\n|    min|                 6|  2840|\n|    max|            119534|  2840|\n+-------+------------------+------+\n\n"
      },
      "dateCreated": "Nov 28, 2017 2:06:07 PM",
      "dateStarted": "Dec 5, 2017 5:36:26 PM",
      "dateFinished": "Dec 5, 2017 5:36:57 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1512491786689_1238621258",
      "id": "20171205-173626_331854562",
      "dateCreated": "Dec 5, 2017 5:36:26 PM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "purchBaselinesVer2: Cartesian_Product",
  "id": "2CZBWKH43",
  "angularObjects": {
    "2BJGSXM37": [],
    "2BGHSKCA7": [],
    "2BHKKP27G": [],
    "2BGVG5JP4": [],
    "2BFMBPKAB": [],
    "2BF969NNB": [],
    "2BJAQG5W4": [],
    "2BJHJDBK6": [],
    "2BHKAE8WK": [],
    "2BG8QQJNC": [],
    "2BJ7KKX85": [],
    "2BH9AVVKH": [],
    "2BJ6HN5AY": [],
    "2BFEDXCTE": [],
    "2BJ5FCP57": [],
    "2BJ8AEWCT": [],
    "2BFXEV5XZ": [],
    "2BG77RV7M": []
  },
  "config": {},
  "info": {}
}